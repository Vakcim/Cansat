
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2b  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095f  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004af  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c4  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000025c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5a d0       	rcall	.+180    	; 0x15e <main>
  aa:	b0 c0       	rjmp	.+352    	; 0x20c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <dhtread>:
#define DHT_DDR         DDRA
#define DHT_PIN         PINA
#define DHT_BIT         7 // БИТ порта

int dhtread (int *datadht) // если в программе имеются прерывания,то не забывайте их отлючать перед чтением датчика
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	fc 01       	movw	r30, r24

	uint8_t  j = 0, i = 0;
	
	datadht[0] = datadht[1] = datadht[2] = datadht[3] = datadht[4] = 0;
  b4:	11 86       	std	Z+9, r1	; 0x09
  b6:	10 86       	std	Z+8, r1	; 0x08
  b8:	17 82       	std	Z+7, r1	; 0x07
  ba:	16 82       	std	Z+6, r1	; 0x06
  bc:	15 82       	std	Z+5, r1	; 0x05
  be:	14 82       	std	Z+4, r1	; 0x04
  c0:	13 82       	std	Z+3, r1	; 0x03
  c2:	12 82       	std	Z+2, r1	; 0x02
  c4:	11 82       	std	Z+1, r1	; 0x01
  c6:	10 82       	st	Z, r1
	
	DHT_DDR|=(1<<DHT_BIT); //pin as output
  c8:	d7 9a       	sbi	0x1a, 7	; 26
	DHT_PORT&=~(1<<DHT_BIT);
  ca:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9c e8       	ldi	r25, 0x8C	; 140
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <dhtread+0x22>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <dhtread+0x28>
  d6:	00 00       	nop
	_delay_ms(18);


	DHT_PORT|=(1<<DHT_BIT);
  d8:	df 9a       	sbi	0x1b, 7	; 27
	DHT_DDR&=~(1<<DHT_BIT);
  da:	d7 98       	cbi	0x1a, 7	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	95 e8       	ldi	r25, 0x85	; 133
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <dhtread+0x30>
  e2:	00 00       	nop
	_delay_us(50); // +1 для attiny(коррекция без кварца)
	if (DHT_PIN&(1<<DHT_BIT)) return 0;
  e4:	cf 99       	sbic	0x19, 7	; 25
  e6:	33 c0       	rjmp	.+102    	; 0x14e <dhtread+0xa0>
  e8:	85 ed       	ldi	r24, 0xD5	; 213
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <dhtread+0x3c>
  ee:	00 00       	nop
	_delay_us(80); // +1 для attiny(коррекция без кварца)
	if (!(DHT_PIN&(1<<DHT_BIT))) return 0;
  f0:	cf 9b       	sbis	0x19, 7	; 25
  f2:	30 c0       	rjmp	.+96     	; 0x154 <dhtread+0xa6>
	while (DHT_PIN&(1<<DHT_BIT));
  f4:	cf 99       	sbic	0x19, 7	; 25
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <dhtread+0x46>
  f8:	ef 01       	movw	r28, r30
  fa:	3a 96       	adiw	r30, 0x0a	; 10
		for(i=0; i<8; i++)
		{
			while (!(DHT_PIN&(1<<DHT_BIT)));
			_delay_us (30);
			if (DHT_PIN&(1<<DHT_BIT))
			datadht[j]|=1<<(7-i);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	de 01       	movw	r26, r28
	_delay_us(80); // +1 для attiny(коррекция без кварца)
	if (!(DHT_PIN&(1<<DHT_BIT))) return 0;
	while (DHT_PIN&(1<<DHT_BIT));
	for (j=0; j<5; j++)
	{
		datadht[j]=0;
 102:	19 82       	std	Y+1, r1	; 0x01
 104:	18 82       	st	Y, r1
 106:	27 e0       	ldi	r18, 0x07	; 7
 108:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0; i<8; i++)
		{
			while (!(DHT_PIN&(1<<DHT_BIT)));
 10a:	cf 9b       	sbis	0x19, 7	; 25
 10c:	fe cf       	rjmp	.-4      	; 0x10a <dhtread+0x5c>
 10e:	90 e5       	ldi	r25, 0x50	; 80
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <dhtread+0x62>
			_delay_us (30);
			if (DHT_PIN&(1<<DHT_BIT))
 114:	cf 9b       	sbis	0x19, 7	; 25
 116:	0f c0       	rjmp	.+30     	; 0x136 <dhtread+0x88>
			datadht[j]|=1<<(7-i);
 118:	8d 91       	ld	r24, X+
 11a:	9c 91       	ld	r25, X
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	ab 01       	movw	r20, r22
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <dhtread+0x7a>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <dhtread+0x76>
 12c:	48 2b       	or	r20, r24
 12e:	59 2b       	or	r21, r25
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	5c 93       	st	X, r21
 134:	4e 93       	st	-X, r20
			while (DHT_PIN&(1<<DHT_BIT));
 136:	cf 99       	sbic	0x19, 7	; 25
 138:	fe cf       	rjmp	.-4      	; 0x136 <dhtread+0x88>
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
 13e:	28 f7       	brcc	.-54     	; 0x10a <dhtread+0x5c>
 140:	22 96       	adiw	r28, 0x02	; 2
	_delay_us(50); // +1 для attiny(коррекция без кварца)
	if (DHT_PIN&(1<<DHT_BIT)) return 0;
	_delay_us(80); // +1 для attiny(коррекция без кварца)
	if (!(DHT_PIN&(1<<DHT_BIT))) return 0;
	while (DHT_PIN&(1<<DHT_BIT));
	for (j=0; j<5; j++)
 142:	ec 17       	cp	r30, r28
 144:	fd 07       	cpc	r31, r29
 146:	e1 f6       	brne	.-72     	; 0x100 <dhtread+0x52>
			while (DHT_PIN&(1<<DHT_BIT));
		}
	}
	

	return 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	05 c0       	rjmp	.+10     	; 0x158 <dhtread+0xaa>


	DHT_PORT|=(1<<DHT_BIT);
	DHT_DDR&=~(1<<DHT_BIT);
	_delay_us(50); // +1 для attiny(коррекция без кварца)
	if (DHT_PIN&(1<<DHT_BIT)) return 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <dhtread+0xaa>
	_delay_us(80); // +1 для attiny(коррекция без кварца)
	if (!(DHT_PIN&(1<<DHT_BIT))) return 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	

	return 1;
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:
#define _DDR_DHT   DDRA
#define _PIN_DHT   PINA
#define _PINNUM_DHT   7 /* Нумерация пинов с 0 */

int main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	28 97       	sbiw	r28, 0x08	; 8
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	int datadht[4];
	DDRA = (1<<PA6);
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	8a bb       	out	0x1a, r24	; 26
	while(1){
	
	if (dhtread(datadht)){
 176:	ce 01       	movw	r24, r28
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	99 df       	rcall	.-206    	; 0xae <dhtread>
 17c:	89 2b       	or	r24, r25
 17e:	a9 f0       	breq	.+42     	; 0x1aa <main+0x4c>
		PORTA |= (1<<PA6);
 180:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	89 e6       	ldi	r24, 0x69	; 105
 186:	98 e1       	ldi	r25, 0x18	; 24
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x2a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x34>
 192:	00 00       	nop
		_delay_ms(1000);
		PORTA &= ~(1<<PA6);
 194:	de 98       	cbi	0x1b, 6	; 27
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	89 e6       	ldi	r24, 0x69	; 105
 19a:	98 e1       	ldi	r25, 0x18	; 24
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x3e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x48>
 1a6:	00 00       	nop
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x74>
		_delay_ms(1000);
	} else {
		PORTA |= (1<<PA6);
 1aa:	de 9a       	sbi	0x1b, 6	; 27
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x5e>
 1bc:	00 00       	nop
		_delay_ms(100);
		PORTA &= ~(1<<PA6);
 1be:	de 98       	cbi	0x1b, 6	; 27
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	80 e7       	ldi	r24, 0x70	; 112
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x68>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x72>
 1d0:	00 00       	nop
		_delay_ms(100);
	}
	if (datadht[1]==0 && datadht[3]==0) {
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	89 2b       	or	r24, r25
 1d8:	71 f6       	brne	.-100    	; 0x176 <main+0x18>
 1da:	8f 81       	ldd	r24, Y+7	; 0x07
 1dc:	98 85       	ldd	r25, Y+8	; 0x08
 1de:	89 2b       	or	r24, r25
 1e0:	51 f6       	brne	.-108    	; 0x176 <main+0x18>
		PORTA |= (1<<PA6);
 1e2:	de 9a       	sbi	0x1b, 6	; 27
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	83 e2       	ldi	r24, 0x23	; 35
 1e8:	94 ef       	ldi	r25, 0xF4	; 244
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x8c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x96>
 1f4:	00 00       	nop
		_delay_ms(10000);
		PORTA &= ~(1<<PA6);
 1f6:	de 98       	cbi	0x1b, 6	; 27
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	89 e6       	ldi	r24, 0x69	; 105
 1fc:	98 e1       	ldi	r25, 0x18	; 24
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0xa0>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0xaa>
 208:	00 00       	nop
 20a:	b5 cf       	rjmp	.-150    	; 0x176 <main+0x18>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
